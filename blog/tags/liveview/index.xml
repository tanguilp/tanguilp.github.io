<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Liveview on Tangui&#39;s blog</title>
    <link>http://localhost:1313/blog/tags/liveview/</link>
    <description>Recent content in Liveview on Tangui&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Sep 2024 01:39:41 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/tags/liveview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Caching Liveviews - Part 2: Publicly caching private Liveviews</title>
      <link>http://localhost:1313/blog/posts/caching-liveviews-part-2/</link>
      <pubDate>Thu, 05 Sep 2024 01:39:41 +0100</pubDate>
      <guid>http://localhost:1313/blog/posts/caching-liveviews-part-2/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://localhost:1313/blog/posts/caching-liveviews-part-1/&#34;&gt;Part 1: The road to HTTP-caching Liveviews&lt;/a&gt;, we&amp;rsquo;ve&#xA;succeeded in caching the initial rendering of Liveviews.&lt;/p&gt;&#xA;&lt;p&gt;For this we had to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;disable CSRF token check, using a modified version of Phoenix&lt;/li&gt;&#xA;&lt;li&gt;disable sending the CSRF token when establishing the websocket connection&lt;/li&gt;&#xA;&lt;li&gt;configure a Plug that sets the &lt;code&gt;cache-control&lt;/code&gt; header&lt;/li&gt;&#xA;&lt;li&gt;and eventually configure &lt;code&gt;PlugHTTPCache&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;So far we succeeded in caching Liveviews that render public content. Caching private content with&#xA;&lt;code&gt;plug_http_cache&lt;/code&gt; or a CDN makes little sense, as the goal of a shared cache is to reuse response&#xA;generated for a user A to all other users.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Caching Liveviews - Part 1: The road to HTTP-caching Liveviews</title>
      <link>http://localhost:1313/blog/posts/caching-liveviews-part-1/</link>
      <pubDate>Sat, 31 Aug 2024 13:04:22 +0100</pubDate>
      <guid>http://localhost:1313/blog/posts/caching-liveviews-part-1/</guid>
      <description>&lt;p&gt;Since I release of &lt;a href=&#34;http://localhost:1313/blog/posts/introducing-http-cache/&#34;&gt;HTTP caching libraries&lt;/a&gt; for Elixir and&#xA;particularly &lt;a href=&#34;https://hex.pm/packages/plug_http_cache&#34;&gt;&lt;code&gt;plug_http_cache&lt;/code&gt;&lt;/a&gt;, the most&#xA;frequent question has been if it&amp;rsquo;s possible to cache Liveviews.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-caching-liveviews&#34;&gt;Why caching Liveviews&lt;/h2&gt;&#xA;&lt;p&gt;The first reason is &lt;strong&gt;SEO&lt;/strong&gt;, that is to speed up page loading to get a better page ranking. Search&#xA;engines take into account many parameters, including the Time To First Byte which is why caching is&#xA;important for some Phoenix apps. Although you can theoretically develop some pages with Liveview&#xA;(not cacheable until today) and some others, with no interactive, in plain old Phoenix views&#xA;(cacheable - but they&amp;rsquo;ll never have Liveview&amp;rsquo;s interactivity), developers tend to choose only one&#xA;option. I&amp;rsquo;ve heard that the lack of cacheability has been a obstacle to adopting Liveview in some&#xA;projects.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
